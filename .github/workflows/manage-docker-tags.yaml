name: Cleanup Old Docker Tags

on:
  workflow_dispatch: # Allows manual trigger

jobs:
  cleanup-docker-tags:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install requests

    - name: Cleanup Old Docker Tags
      env:
        REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
        REPO_NAME: ${{ secrets.DOCKER_REPO }}
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        python <<EOF
        import requests
        from requests.auth import HTTPBasicAuth
        import re

        # Configuration from environment variables
        REGISTRY_URL = "${{ env.REGISTRY_URL }}"
        REPO_NAME = "${{ env.REPO_NAME }}"
        USERNAME = "${{ env.USERNAME }}"
        PASSWORD = "${{ env.PASSWORD }}"

        def list_tags(repo_name):
            url = f"{REGISTRY_URL}/v2/{repo_name}/tags/list"
            response = requests.get(url, auth=HTTPBasicAuth(USERNAME, PASSWORD))
            if response.status_code == 200:
                return response.json().get("tags", [])
            else:
                print(f"Failed to fetch tags: {response.status_code}, {response.text}")
                return []

        def delete_image(repo_name, digest):
            manifest_url = f"{REGISTRY_URL}/v2/{repo_name}/manifests/{digest}"
            headers = {"Accept": "application/vnd.docker.distribution.manifest.v2+json"}
            manifest_response = requests.head(manifest_url, auth=HTTPBasicAuth(USERNAME, PASSWORD), headers=headers)
            if manifest_response.status_code == 200:
                digest_to_delete = manifest_response.headers.get("Docker-Content-Digest")
                delete_response = requests.delete(
                    f"{REGISTRY_URL}/v2/{repo_name}/manifests/{digest_to_delete}",
                    auth=HTTPBasicAuth(USERNAME, PASSWORD),
                )
                if delete_response.status_code == 202:
                    print(f"Successfully deleted image with digest: {digest_to_delete}")
                else:
                    print(f"Failed to delete image: {delete_response.status_code}, {delete_response.text}")
            else:
                print(f"Failed to fetch manifest for tag {digest}: {manifest_response.status_code}, {manifest_response.text}")

        def clean_old_tags():
            tags = list_tags(REPO_NAME)
            if not tags:
                print("No tags found.")
                return

            timestamp_tags = [tag for tag in tags if re.search(r'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}', tag)]
            timestamp_tags.sort(reverse=True)

            if len(timestamp_tags) > 10:
                old_tags = timestamp_tags[10:]
                for old_tag in old_tags:
                    print(f"Deleting old tag: {old_tag}")
                    delete_image(REPO_NAME, old_tag)
            else:
                print("No tags to delete, count is within the limit.")

        clean_old_tags()
        EOF
